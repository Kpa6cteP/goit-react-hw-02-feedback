{"version":3,"sources":["components/section/Section.js","components/feedbackOptions/FeedbackOptions.js","components/notification/Notification.js","components/statistics/Statistics.js","components/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","type","onClick","Notification","message","Statistics","good","neutral","bad","total","positiveFeedback","App","state","handleCounter","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","positivePercentage","Object","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"sPAkBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,6BAAKD,IACJC,MCWQC,EAhBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAmBA,KAAK,SAASC,QAAS,kBAAMH,EAAgBE,IAAhE,SACGA,GADUA,SCMNE,EAVM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,6BAAKA,KCkBMC,EApBI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC/C,OACE,gCACE,yCAAYJ,KACZ,4CAAeC,KACf,wCAAWC,KACX,0CAAaC,KACb,sDAAyBC,EAAzB,WCmCSC,E,4MAtCbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,cAAgB,SAACZ,GAAD,OAAU,EAAKa,UAAS,SAACC,GAAD,sBACrCd,EAAOc,EAAUd,GAAQ,O,EAG5Be,mBAAqB,kBAAM,EAAKJ,MAAMN,KAAO,EAAKM,MAAML,QAAU,EAAKK,MAAMJ,K,EAE7ES,gCAAkC,WAAO,IAC/BX,EAAS,EAAKM,MAAdN,KACFG,EAAQ,EAAKO,qBACnB,OAAOP,EAAQS,KAAKC,MAAOb,EAAOG,EAAS,KAAO,G,uDAG1C,IAAD,EACwBW,KAAKR,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQW,KAAKJ,qBACbK,EAAqBD,KAAKH,kCAEhC,OACE,gCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBG,QAASwB,OAAOC,KAAKH,KAAKR,OAAQb,gBAAiBqB,KAAKP,kBAE3E,cAAC,EAAD,CAASlB,MAAM,aAAf,SACGc,EAAQ,EACP,cAAC,EAAD,CAAYH,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,iBAAkBW,IAClF,cAAC,EAAD,CAAcjB,QAAQ,+B,GAhClBoB,aCDlBC,IAASC,OACP,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7b4188bf.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.any,\r\n}\r\n\r\nexport default Section\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      {options.map((type) => (\r\n        <button key={type} type=\"button\" onClick={() => onLeaveFeedback(type)}>\r\n          {type}\r\n        </button>\r\n      ))}</div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <h2>{message}</h2>\r\n  )\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positiveFeedback }) => {\r\n  return (\r\n    <div>\r\n      <div>Good: {good}</div>\r\n      <div>Neutral: {neutral}</div>\r\n      <div>Bad: {bad}</div>\r\n      <div>Total: {total}</div>\r\n      <div>Positive feedback: {positiveFeedback}%</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positiveFeedback: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;","import React, { Component } from 'react';\nimport Section from './section/Section';\nimport FeedbackOptions from './feedbackOptions/FeedbackOptions';\nimport Notification from './notification/Notification';\nimport Statistics from \"./statistics/Statistics\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n  handleCounter = (type) => this.setState((prevState) => ({\n    [type]: prevState[type] + 1\n  }));\n\n  countTotalFeedback = () => this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions options={Object.keys(this.state)} onLeaveFeedback={this.handleCounter}></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {total > 0 ?\n            <Statistics good={good} neutral={neutral} bad={bad} total={total} positiveFeedback={positivePercentage} />\n            : <Notification message=\"No feedback given\" />}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n\n"],"sourceRoot":""}